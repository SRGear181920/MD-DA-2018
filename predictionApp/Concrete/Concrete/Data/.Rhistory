# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(concrete$Concrete.compressive~., data=concrete, method="rf", metric=metric, trControl=control)
install.packages("randomForest")
#install.packages("caret")
library(caret)
install.packages("e1071")
install.packages("randomForest")
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(concrete$Concrete.compressive~., data=concrete, method="rf", metric=metric, trControl=control)
#fit.rf<-train(concrete$Concrete.compressive~., data=concrete, method="rf", metric=metric, trControl=control)
fit.rf<-train(data=concrete, ,concrete$Concrete.compressive~.,  method="rf", metric=metric, trControl=control)
fit.rf<-train(data=concrete, ,concrete$Concrete.compressive~.,  method="rf", metric=metric, trControl=control)
fit.rf<-train(data=concrete,concrete$Concrete.compressive~.,  method="rf", metric=metric, trControl=control)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
#fit.rf<-train(concrete$Concrete.compressive~., data=concrete, method="rf", metric=metric, trControl=control)
fit.rf<-train(data=concrete,concrete$Concrete.compressive~.,  method="rf", metric=metric, trControl=control)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
#fit.rf<-train(concrete$Concrete.compressive~., data=concrete, method="rf", metric=metric, trControl=control)
fit.rf<-train(data=concrete,concrete$Concrete.compressive~.,  method="rf", metric=metric, trControl=control)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(concrete$Concrete.compressive~., data=concrete, method="rf", metric=metric, trControl=control)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(concrete$Concrete.compressive~concrete$Cement, data=concrete, method="rf", metric=metric, trControl=control)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(concrete$Concrete.compressive~., data=concrete, method="rf", metric=metric, trControl=control)
View(concrete)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(y = concrete$Concrete.compressive, x = concrete[,1:8], method="rf", metric=metric, trControl=control)
a<-data.frame(Cement={0}, Blast.Furnace.Slag=1, Fly.Ash=2, Water=3,Superplasticizer=0, Coarse.Aggregate=1, Fine.Aggregate=2, Age=3)
predict(fit.rt, a)
View(a)
predict(fit.rf, a)
featurePlot(x=concreteNew[,1:8], y = concreteNew[,9], plot = "ellipse")
featurePlot(x=concrete[,1:8], y = concrete[,9], plot = "ellipse")
featurePlot(x=concrete[,1], y = concrete[,9], plot = "ellipse")
featurePlot(x=concrete[,1], y = concrete[,9], plot = "ellipse")
featurePlot(x=concrete[,1], y = concrete[,9], plot = "ellipse")
featurePlot(x=concrete[,1:2], y = concrete[,9], plot = "ellipse")
summary(concrete)
concrete<-concrete[-1,]
concrete<-concrete[-2,]
View(concrete)
concrete<-concrete[-5,]
View(concrete)
concrete<-concrete[-5,]
concrete<-concrete[-5,]
concrete<-concrete[-5,]
concrete<-concrete[-1,]
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[-1,]
concrete<-concrete[-1,]
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(y = concrete$Concrete.compressive, x = concrete[,1:8], method="rf", metric=metric, trControl=control)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[-1,]
concrete<-concrete[-2,]
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(y = concrete$Concrete.compressive, x = concrete[,1:8], method="rf", metric=metric, trControl=control)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
concrete<-concrete[-1,]
concrete<-concrete[-4,]
concrete<-concrete[-5,]
concrete<-concrete[-13,]
validation_index <- createDataPartition(concrete$Concrete.compressive, p=0.80, list=FALSE)
validation <- concrete[-validation_index,]
concrete <- concrete[validation_index,]
View(validation)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
validation_index <- createDataPartition(concrete$Concrete.compressive, p=0.80, list=FALSE)
validation <- concrete[-validation_index,]
concrete <- concrete[validation_index,]
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(y = concrete$Concrete.compressive, x = concrete[,1:8], method="rf", metric=metric, trControl=control)
View(validation)
View(validation)
View(validation)
View(validation_index)
View(validation_index)
View(validation_index)
View(validation_index)
View(validation)
View(validation)
View(concrete)
View(concrete)
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("C:/Users/User/Desktop/Concrete/Data/Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7),]
concrete$Concrete.compressive <-
factor(c("A0", "A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive+1])
concrete$Concrete.compressive.strength <- NULL
validation_index <- createDataPartition(concrete$Concrete.compressive, p=0.80, list=FALSE)
validation <- concrete[-validation_index,]
concrete <- concrete[validation_index,]
concrete<-concrete[concrete$Age<200,]
concrete<-concrete[(
((concrete$Fine.Aggregate>650 & concrete$Fine.Aggregate<940) & concrete$Concrete.compressive == "A1") |
((concrete$Fine.Aggregate>605 & concrete$Fine.Aggregate<920) & concrete$Concrete.compressive == "A2") |
((concrete$Fine.Aggregate>600 & concrete$Fine.Aggregate<900) & concrete$Concrete.compressive == "A3") |
( concrete$Fine.Aggregate<900 & concrete$Concrete.compressive == "A4") |
( concrete$Fine.Aggregate<950 & concrete$Concrete.compressive == "A5") | concrete$Concrete.compressive == "A0" | concrete$Concrete.compressive == "A6")
,]
# # #Анализ: будем запускать все алгоримы и проверять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# # # Контролируема метрика
metric <- "Accuracy"
# #
# # #RandomForest
set.seed(13)
fit.rf<-train(y = concrete$Concrete.compressive, x = concrete[,1:8], method="rf", metric=metric, trControl=control)
View(validation)
View(validation)
View(validation)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
concrete<-concrete[-c(51, 46, 682, 556, 506, 483),]
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
concrete<-data.frame(read.csv2("..\\..\\Data\\Concrete_Data.csv"))
concrete<-data.frame(read.csv2("..\..\Data\Concrete_Data.csv"))
concrete<-data.frame(read.csv2(".\Concrete_Data.csv"))
concrete<-data.frame(read.csv2(".\Concrete_Data.csv"))
concrete<-data.frame(read.csv2("./Concrete_Data.csv"))
concrete<-concrete[(concrete$Concrete.compressive<7) & (concrete$Concrete.compressive>0),]
concrete<-concrete[(concrete$Concrete.compressive<7) & (concrete$Concrete.compressive>0),]
concrete<-data.frame(read.csv2("./Concrete_Data.csv"))
concrete<-concrete[-c(51, 46, 682, 556, 506, 483),]
#Назначаем категории и избавляемся от категорий, где данных мало
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7) & (concrete$Concrete.compressive>0),]
concrete<-data.frame(read.csv2("./Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete<-concrete[-c(51, 46, 682, 556, 506, 483),]
#Назначаем категории и избавляемся от категорий, где данных мало
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7) & (concrete$Concrete.compressive>0),]
#install.packages("caret")
library(caret)
#install.packages("e1071")
#install.packages("randomForest")
library(randomForest)
concrete<-data.frame(read.csv2("./Concrete_Data.csv"))
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete<-concrete[-c(51, 46, 682, 556, 506, 483),]
#Назначаем категории и избавляемся от категорий, где данных мало
concrete$Concrete.compressive=concrete$Concrete.compressive.strength%/%10
concrete<-concrete[(concrete$Concrete.compressive<7) & (concrete$Concrete.compressive>0),]
concrete$Concrete.compressive <-
factor(c("A1", "A2", "A3", "A4", "A5", "A6")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
## Чистим данные исходя из графиков
concrete<- concrete[((concrete$Cement <400 &
(concrete$Fine.Aggregate <910 & concrete$Fine.Aggregate >650) &
(concrete$Coarse.Aggregate >825) &
(concrete$Water >125) & concrete$Blast.Furnace.Slag <250) & concrete$Concrete.compressive == "A1") |
(concrete$Concrete.compressive == "A2" & concrete$Age<30 &
concrete$Fine.Aggregate<930 & concrete$Fine.Aggregate>600 &
concrete$Water >130 & concrete$Water <230) |
(concrete$Concrete.compressive == "A3" & concrete$Age<80 & concrete$Fine.Aggregate <910) |
(concrete$Concrete.compressive == "A4" & concrete$Age <200 & concrete$Fine.Aggregate <950) |
(concrete$Concrete.compressive == "A5" & concrete$Age < 150 & concrete$Fine.Aggregate < 950 & concrete$Water <220 ) |
(concrete$Concrete.compressive == "A6" & concrete$Age < 101),]
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# # #RandomForest
set.seed(13)
fit.rf<-train(y = concrete$Concrete.compressive, x = concrete[,1:8], method="rf", metric=metric, trControl=control)
library(randomForest)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
concrete<-data.frame(read.csv2("../../Data/Concrete_Data.csv"))
concrete<-data.frame(read.csv2("../../Concrete_Data.csv"))
