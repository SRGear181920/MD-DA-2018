factor(c("GOOD", "BAD"), concrete$Concrete.compressive > m)
concrete$Concrete.compressive[concrete$Concrete.compressive > m] <-
factor(c("GOOD"))
View(concrete)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive[concrete$Concrete.compressive > m] <-
factor(c("GOOD"))
View(concrete)
concrete$Concrete.compressive[concrete$Concrete.compressive > m] <-
factor(c("GOOD", "BAD"))
concrete$Concrete.compressive <- ifelse(concrete$Concrete.compressive > m, 2, 1)
View(concrete)
bla<-ifelse(concrete$Concrete.compressive > m, 2, 1)
bla
concrete$Concrete.compressive[concrete$Concrete.compressive.strength > m] <-
factor(c("GOOD", "BAD"))
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive.strength > m])
bla<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
bla
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive])
View(concrete)
View(concrete)
concrete$Concrete.compressive.strength <- NULL
featurePlot(x=concrete[,1:8], y = concrete[,9], plot = "box")
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
hist(concrete$Concrete.compressive)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
hist(concrete$Concrete.compressive.strength)
sort(concrete$Concrete.compressive.strength)
View(concrete)
sort(concrete, concrete$Concrete.compressive.strength)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
concreteNew <- concrete
percentage <- prop.table(table(concreteNew$Concrete.compressive)) * 100
cbind(freq=table(concreteNew$Concrete.compressive), percentage=percentage)
control <- trainControl(method="cv", number=10)
# Контролируема метрика
metric <- "Accuracy"
#LDA
set.seed(13)
fit.lda <- train(Concrete.compressive~., data=concreteNew, method="lda", metric=metric, trControl=control)
#CART
set.seed(13)
fit.cart <- train(Concrete.compressive~., data=concreteNew, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(13)
fit.knn <- train(Concrete.compressive~., data=concreteNew, method="knn", metric=metric, trControl=control)
# SVM
set.seed(13)
fit.svm <- train(Concrete.compressive~., data=concreteNew, method="svmRadial", metric=metric, trControl=control)
#RandomForest
set.seed(13)
fit.rf <- train(Concrete.compressive~., data=concreteNew, method="rf", metric=metric, trControl=control)
#Получим оценки конролируемой метрики для каждого алгоритма
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
#визуализируем
dotplot(results)
#лучше всех rf
print(fit.rf)
#Её и будем использовать
#для этого у нас подготовлен валидационный набор
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$Concrete.compressive)
validation_index <- createDataPartition(concreteNew$Concrete.compressive, p=0.80, list=FALSE)
validation <- concreteNew[-validation_index,]
concreteNew <- concreteNew[validation_index,]
#для этого у нас подготовлен валидационный набор
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$Concrete.compressive)
fit.rf <- train(Concrete.compressive~., data=concreteNew, method="rf", metric=metric, trControl=control)
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$Concrete.compressive)
featurePlot(x=concrete[,1:8], y = concrete[,9], plot = "box")
concrete<- concrete[concrete$Age<200, ]
concreteNew <- concrete
featurePlot(x=concreteNew[,1:8], y = concreteNew[,9], plot = "box")
good<-concrete[concrete$Concrete.compressive == "GOOD"]
bad<-concrete[concrete$Concrete.compressive == "BAD"]
ibrary(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
good<-concrete[concrete$Concrete.compressive == "GOOD"]
bad<-concrete[concrete$Concrete.compressive == "BAD"]
good<-concrete[concrete$Concrete.compressive == "GOOD",]
bad<-concrete[concrete$Concrete.compressive == "BAD",]
featurePlot(x=bad[,1:8], y = bad[,9], plot = "box")
View(bad)
bad<-bad[bad$Fine.Aggregate<950 & bad$Age <200 & bad$Blast.Furnace.Slag<310]
bad<-bad[bad$Fine.Aggregate<950 & bad$Age <200 & bad$Blast.Furnace.Slag<310,]
featurePlot(x=bad[,1:8], y = bad[,9], plot = "box")
featurePlot(x=good[,1:8], y = good[,9], plot = "box")
View(good)
good<-good[good$Fine.Aggregate <950 & good$Fine.Aggregate>650 &
good$Age<50,]
featurePlot(x=good[,1:8], y = good[,9], plot = "box")
good<-good[good$Fine.Aggregate <910 & good$Fine.Aggregate>650 &
good$Age<50,]
featurePlot(x=good[,1:8], y = good[,9], plot = "box")
concreteNew <- rbind(bad,good)
percentage <- prop.table(table(concreteNew$Concrete.compressive)) * 100
cbind(freq=table(concreteNew$Concrete.compressive), percentage=percentage)
plot(concreteNew$Concrete.compressive)
#Выборка данных для проверки
validation_index <- createDataPartition(concreteNew$Concrete.compressive, p=0.80, list=FALSE)
validation <- concreteNew[-validation_index,]
concreteNew <- concreteNew[validation_index,]
#Анализ: будем запускать все алгоримы и проерять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# Контролируема метрика
metric <- "Accuracy"
#LDA
set.seed(13)
fit.lda <- train(Concrete.compressive~., data=concreteNew, method="lda", metric=metric, trControl=control)
#CART
set.seed(13)
fit.cart <- train(Concrete.compressive~., data=concreteNew, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(13)
fit.knn <- train(Concrete.compressive~., data=concreteNew, method="knn", metric=metric, trControl=control)
# SVM
set.seed(13)
fit.svm <- train(Concrete.compressive~., data=concreteNew, method="svmRadial", metric=metric, trControl=control)
#RandomForest
set.seed(13)
fit.rf <- train(Concrete.compressive~., data=concreteNew, method="rf", metric=metric, trControl=control)
#Получим оценки конролируемой метрики для каждого алгоритма
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
#визуализируем
dotplot(results)
#лучше всех rf
print(fit.rf)
#Её и будем использовать
#для этого у нас подготовлен валидационный набор
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$Concrete.compressive)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
good<-concrete[concrete$Concrete.compressive == "GOOD",]
bad<-concrete[concrete$Concrete.compressive == "BAD",]
featurePlot(x=bad[,1:8], y = bad[,9], plot = "box")
bad<-bad[bad$Fine.Aggregate<950 & bad$Age <200 & bad$Blast.Furnace.Slag<310,]
featurePlot(x=good[,1:8], y = good[,9], plot = "box")
good<-good[good$Fine.Aggregate <910 & good$Fine.Aggregate>650 &
good$Age<50,]
concreteNew <- rbind(bad,good)
featurePlot(x=concrete[,1:8], y = concrete[,9], plot = "box")
featurePlot(x=concreteNew[,1:8], y = concreteNew[,9], plot = "box")
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
good<-concrete[concrete$Concrete.compressive == "GOOD",]
bad<-concrete[concrete$Concrete.compressive == "BAD",]
featurePlot(x=bad[,1:8], y = bad[,9], plot = "box")
bad<-bad[bad$Fine.Aggregate<950 & bad$Age <200 & bad$Blast.Furnace.Slag<310,]
featurePlot(x=good[,1:8], y = good[,9], plot = "box")
good<-good[good$Fine.Aggregate <910 & good$Fine.Aggregate>650 &
good$Age<50,]
concreteNew <- rbind(bad,good)
View(concreteNew)
View(concrete)
View(concreteNew)
View(concrete)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
View(concrete)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
View(concrete)
View(concrete)
View(concrete)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
concrete$Concrete.compressive <-
factor(c("BAD", "GOOD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
c1<-concrete[concrete$Concrete.compressive == "GOOD",]
c2<-concrete[concrete$Concrete.compressive == "BAD",]
featurePlot(x=c2[,1:8], y = c2[,9], plot = "box")
c2<-c2[c2$Fine.Aggregate<950 & c2$Age <200 & c2$Blast.Furnace.Slag<310,]
featurePlot(x=c1[,1:8], y = c1[,9], plot = "box")
c1<-c1[c1$Fine.Aggregate <910 & c1$Fine.Aggregate>650 &
c1$Age<50,]
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
concrete$Concrete.compressive <-
factor(c("BAD", "GOOD")[concrete$Concrete.compressive])
c1<-concrete[concrete$Concrete.compressive == "GOOD",]
c2<-concrete[concrete$Concrete.compressive == "BAD",]
c2<-c2[c2$Fine.Aggregate<950 & c2$Age <200 & c2$Blast.Furnace.Slag<310,]
c1<-c1[c1$Fine.Aggregate <910 & c1$Fine.Aggregate>650 &
c1$Age<50,]
c1<-concrete[concrete$Concrete.compressive == "GOOD",]
c2<-concrete[concrete$Concrete.compressive == "BAD",]
featurePlot(x=c2[,1:8], y = c2[,9], plot = "box")
c2<-c2[c2$Fine.Aggregate<950 & c2$Age <200 & c2$Blast.Furnace.Slag<310,]
featurePlot(x=c2[,1:8], y = c2[,9], plot = "box")
View(c2)
View(c1)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 2, 1)
concrete$Concrete.compressive <-
factor(c("BAD", "GOOD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
c1<-concrete[concrete$Concrete.compressive == "GOOD",]
c2<-concrete[concrete$Concrete.compressive == "BAD",]
c2<-c2[c2$Fine.Aggregate<950 & c2$Age <200 & c2$Blast.Furnace.Slag<310,]
featurePlot(x=c2[,1:8], y = c2[,9], plot = "box")
featurePlot(x=c1[,1:8], y = c1[,9], plot = "box")
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 1, 2)
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
good<-concrete[concrete$Concrete.compressive == "GOOD",]
bad<-concrete[concrete$Concrete.compressive == "BAD",]
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 1, 2)
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
good<-concrete[concrete$Concrete.compressive == "GOOD",]
bad<-concrete[concrete$Concrete.compressive == "BAD",]
bad<-bad[bad$Fine.Aggregate<950 & bad$Age <200 & bad$Blast.Furnace.Slag<310,]
good<-good[good$Fine.Aggregate <910 & good$Fine.Aggregate>650 &
good$Age<50,]
good<-good[good$Fine.Aggregate <910 & good$Fine.Aggregate>650 &
good$Age<50,]
good<-concrete[concrete$Concrete.compressive == "GOOD",]
featurePlot(x=good[,1:8], y = good[,9], plot = "box")
View(good)
bad<-concrete[concrete$Concrete.compressive == "BAD",]
featurePlot(x=bad[,1:8], y = bad[,9], plot = "box")
bad<-bad[bad$Fine.Aggregate <910 & bad$Fine.Aggregate>650 &
bad$Age<50,]
good<-good[good$Fine.Aggregate<950 & good$Age <200 &
good$Blast.Furnace.Slag<310,]
concreteNew <- rbind(bad,good)
featurePlot(x=concrete[,1:8], y = concrete[,9], plot = "box")
featurePlot(x=concreteNew[,1:8], y = concreteNew[,9], plot = "box")
percentage <- prop.table(table(concreteNew$Concrete.compressive)) * 100
cbind(freq=table(concreteNew$Concrete.compressive), percentage=percentage)
#Выборка данных для проверки
validation_index <- createDataPartition(concreteNew$Concrete.compressive, p=0.80, list=FALSE)
validation <- concreteNew[-validation_index,]
concreteNew <- concreteNew[validation_index,]
#Анализ: будем запускать все алгоримы и проерять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# Контролируема метрика
metric <- "Accuracy"
#LDA
set.seed(13)
fit.lda <- train(Concrete.compressive~., data=concreteNew, method="lda", metric=metric, trControl=control)
#CART
set.seed(13)
fit.cart <- train(Concrete.compressive~., data=concreteNew, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(13)
fit.knn <- train(Concrete.compressive~., data=concreteNew, method="knn", metric=metric, trControl=control)
# SVM
set.seed(13)
fit.svm <- train(Concrete.compressive~., data=concreteNew, method="svmRadial", metric=metric, trControl=control)
#RandomForest
set.seed(13)
fit.rf <- train(Concrete.compressive~., data=concreteNew, method="rf", metric=metric, trControl=control)
#Получим оценки конролируемой метрики для каждого алгоритма
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
#визуализируем
dotplot(results)
#лучше всех rf
print(fit.rf)
#Её и будем использовать
#для этого у нас подготовлен валидационный набор
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$Concrete.compressive)
plot(concreteNew$Concrete.compressive)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 1, 2)
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
good<-concrete[concrete$Concrete.compressive == "GOOD",]
bad<-concrete[concrete$Concrete.compressive == "BAD",]
featurePlot(x=bad[,1:8], y = bad[,9], plot = "box")
bad<-bad[bad$Fine.Aggregate <910 & bad$Fine.Aggregate>650 &
bad$Age<50,]
featurePlot(x=good[,1:8], y = good[,9], plot = "box")
good<-good[good$Fine.Aggregate<950 & good$Age <200 &
good$Blast.Furnace.Slag<310,]
concreteNew <- rbind(bad,good)
featurePlot(x=concrete[,1:8], y = concrete[,9], plot = "box")
featurePlot(x=concreteNew[,1:8], y = concreteNew[,9], plot = "box")
percentage <- prop.table(table(concreteNew$Concrete.compressive)) * 100
cbind(freq=table(concreteNew$Concrete.compressive), percentage=percentage)
plot(concreteNew$Concrete.compressive)
#Выборка данных для проверки
validation_index <- createDataPartition(concreteNew$Concrete.compressive, p=0.80, list=FALSE)
validation <- concreteNew[-validation_index,]
concreteNew <- concreteNew[validation_index,]
#Анализ: будем запускать все алгоримы и проерять кроссвалидацией(cv) через 10 блоков
control <- trainControl(method="cv", number=10)
# Контролируема метрика
metric <- "Accuracy"
#LDA
set.seed(13)
fit.lda <- train(Concrete.compressive~., data=concreteNew, method="lda", metric=metric, trControl=control)
#CART
set.seed(13)
fit.cart <- train(Concrete.compressive~., data=concreteNew, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(13)
fit.knn <- train(Concrete.compressive~., data=concreteNew, method="knn", metric=metric, trControl=control)
# SVM
set.seed(13)
fit.svm <- train(Concrete.compressive~., data=concreteNew, method="svmRadial", metric=metric, trControl=control)
#RandomForest
set.seed(13)
fit.rf <- train(Concrete.compressive~., data=concreteNew, method="rf", metric=metric, trControl=control)
#Получим оценки конролируемой метрики для каждого алгоритма
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
#визуализируем
dotplot(results)
#лучше всех rf
print(fit.rf)
#Её и будем использовать
#для этого у нас подготовлен валидационный набор
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$Concrete.compressive)
library(caret)
concrete<-data.frame(read.csv2("Concrete_Data.csv"))
summary(concrete)
colnames(concrete) <- c("Cement",
"Blast.Furnace.Slag",
"Fly.Ash","Water","Superplasticizer",
"Coarse.Aggregate","Fine.Aggregate",
"Age",
"Concrete.compressive.strength")
m<-mean(concrete$Concrete.compressive.strength)
concrete$Concrete.compressive<-ifelse(concrete$Concrete.compressive.strength > m, 1, 2)
concrete$Concrete.compressive <-
factor(c("GOOD", "BAD")[concrete$Concrete.compressive])
concrete$Concrete.compressive.strength <- NULL
good<-concrete[concrete$Concrete.compressive == "GOOD",]
bad<-concrete[concrete$Concrete.compressive == "BAD",]
featurePlot(x=bad[,1:8], y = bad[,9], plot = "box")
bad<-bad[bad$Fine.Aggregate <910 & bad$Fine.Aggregate>650 &
bad$Age<50,]
featurePlot(x=good[,1:8], y = good[,9], plot = "box")
good<-good[good$Fine.Aggregate<950 & good$Age <200 &
good$Blast.Furnace.Slag<310,]
concreteNew <- rbind(bad,good)
View(concreteNew)
